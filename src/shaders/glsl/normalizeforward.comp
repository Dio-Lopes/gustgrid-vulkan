#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout(binding = 5, std430) restrict buffer VelocityBuffer { vec4 velocity[]; };
layout(binding = 6, std430) restrict readonly buffer SpeedBuffer { float speed[]; };
layout(binding = 7, std430) restrict readonly buffer TemperatureBuffer { float temperature[]; };
layout(binding = 9, std430) restrict writeonly buffer  TempTemperatureBuffer { float tempTemperature[]; };
layout(binding = 10, std430) restrict readonly buffer TempSumBuffer { float tempSum[]; };
layout(binding = 11, std430) restrict readonly buffer WeightSumBuffer { float weightSum[]; };
layout(binding = 12, std430) restrict readonly buffer TempSumDissBuffer { float tempSumDiss[]; };
layout(binding = 14, std430) restrict readonly buffer SolidGridBuffer { uint solidGrid[]; };

layout(push_constant) uniform PushConstants {
    vec4 gridSize;
    vec4 worldMin;
    vec4 worldMax;
    vec4 cellSize;
    float deltaTime;
    uint numFans;
    int displayPressure;
    uint padding;
    vec4 fanPositions[8];
    vec4 fanDirections[8];
} pc;

const float c_ambientTemperature = 22.0;
const float velocityThreshold = 0.1;

uint idx3D(uint x, uint y, uint z){
    return uint(x + y * pc.gridSize.x + z * pc.gridSize.x * pc.gridSize.y);
}

void main(){
    uvec3 gid = gl_GlobalInvocationID;
    if(gid.x >= uint(pc.gridSize.x) || gid.y >= uint(pc.gridSize.y) || gid.z >= uint(pc.gridSize.z))
        return;
    uint idx = idx3D(gid.x, gid.y, gid.z);
    float temp = temperature[idx];
    float tempDiff = temp - c_ambientTemperature;
    float tempFactor = min(tempDiff / 50.0, 1.0);
    float baseDissipationRate = 0.02 + tempFactor * 0.08;
    float maxDissipation = 0.3 + tempFactor * 0.3;
    float dissipationFactor = baseDissipationRate;
    float mag = speed[idx];
    if(mag < velocityThreshold){
        float stationaryFactor = 1.0 - (mag / velocityThreshold);
        dissipationFactor = baseDissipationRate + stationaryFactor * (maxDissipation - baseDissipationRate);
    }
    if(solidGrid[idx] != 0) dissipationFactor *= 0.5;
    dissipationFactor = min(dissipationFactor, 0.5);
    float keepFraction = 1.0 - dissipationFactor;
    float w = weightSum[idx];
    float advT = (w > 1e-6) ? tempSum[idx] / w : temp;
    advT *= keepFraction;
    float dissT = tempSumDiss[idx];
    tempTemperature[idx] = advT + dissT;
}